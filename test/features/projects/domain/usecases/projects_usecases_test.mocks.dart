// Mocks generated by Mockito 5.4.2 from annotations
// in worktenser/test/features/projects/domain/usecases/projects_usecases_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:worktenser/features/auth/domain/entities/user.dart' as _i5;
import 'package:worktenser/features/projects/domain/entities/project.dart'
    as _i4;
import 'package:worktenser/features/projects/domain/repository/projects_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i2.ProjectsRepository {
  @override
  _i3.Future<List<_i4.ProjectEntity>> loadProjects(_i5.UserEntity? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadProjects,
          [user],
        ),
        returnValue:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
      ) as _i3.Future<List<_i4.ProjectEntity>>);
  @override
  _i3.Future<bool> addProject(_i4.ProjectEntity? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProject,
          [project],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> updateProject(_i4.ProjectEntity? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteProject(_i4.ProjectEntity? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [project],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  int getProjectsTotalTime(List<_i4.ProjectEntity>? projects) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectsTotalTime,
          [projects],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}
