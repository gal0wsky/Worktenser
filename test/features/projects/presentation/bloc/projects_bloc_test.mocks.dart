// Mocks generated by Mockito 5.4.2 from annotations
// in worktenser/test/features/projects/presentation/bloc/projects_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bloc/bloc.dart' as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;
import 'package:worktenser/features/auth/domain/entities/user.dart' as _i5;
import 'package:worktenser/features/projects/domain/entities/project.dart'
    as _i4;
import 'package:worktenser/features/projects/domain/usecases/add_project.dart'
    as _i6;
import 'package:worktenser/features/projects/domain/usecases/delete_project.dart'
    as _i8;
import 'package:worktenser/features/projects/domain/usecases/get_projects_total_time.dart'
    as _i9;
import 'package:worktenser/features/projects/domain/usecases/load_local_copy.dart'
    as _i10;
import 'package:worktenser/features/projects/domain/usecases/load_projects.dart'
    as _i2;
import 'package:worktenser/features/projects/domain/usecases/update_project.dart'
    as _i7;
import 'package:worktenser/features/timeCounter/presentation/bloc/time_counter/time_counter_bloc.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoadProjectsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadProjectsUsecase extends _i1.Mock
    implements _i2.LoadProjectsUsecase {
  @override
  _i3.Future<List<_i4.ProjectEntity>> call({_i5.UserEntity? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
      ) as _i3.Future<List<_i4.ProjectEntity>>);
}

/// A class which mocks [AddProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddProjectUseCase extends _i1.Mock implements _i6.AddProjectUseCase {
  @override
  _i3.Future<bool> call({_i4.ProjectEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [UpdateProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProjectUseCase extends _i1.Mock
    implements _i7.UpdateProjectUseCase {
  @override
  _i3.Future<bool> call({_i4.ProjectEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [DeleteProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProjectUseCase extends _i1.Mock
    implements _i8.DeleteProjectUseCase {
  @override
  _i3.Future<bool> call({_i4.ProjectEntity? params}) => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [GetProjectsTotalTimeUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectsTotalTimeUseCase extends _i1.Mock
    implements _i9.GetProjectsTotalTimeUseCase {
  @override
  _i3.Future<int> call({List<_i4.ProjectEntity>? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [LoadLocalCopyUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadLocalCopyUseCase extends _i1.Mock
    implements _i10.LoadLocalCopyUseCase {
  @override
  _i3.Future<List<_i4.ProjectEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ProjectEntity>>.value(<_i4.ProjectEntity>[]),
      ) as _i3.Future<List<_i4.ProjectEntity>>);
}

/// A class which mocks [TimeCounterBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockTimeCounterBloc extends _i1.Mock implements _i11.TimeCounterBloc {
  @override
  _i11.TimeCounterState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i12.dummyValue<_i11.TimeCounterState>(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _i12.dummyValue<_i11.TimeCounterState>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i11.TimeCounterState);
  @override
  _i3.Stream<_i11.TimeCounterState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i3.Stream<_i11.TimeCounterState>.empty(),
        returnValueForMissingStub: _i3.Stream<_i11.TimeCounterState>.empty(),
      ) as _i3.Stream<_i11.TimeCounterState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void add(_i11.TimeCounterEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i11.TimeCounterEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i11.TimeCounterState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i11.TimeCounterEvent>(
    _i13.EventHandler<E, _i11.TimeCounterState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i13.Transition<_i11.TimeCounterEvent, _i11.TimeCounterState>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void onChange(_i13.Change<_i11.TimeCounterState>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
